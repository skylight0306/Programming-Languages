(1 . (2 . (3 . 4)))
(1 . (2 . (3 . nil)))
(1 . (2 . (3 . ())))
(1 . (2 . (3 . #f)))
13
13.
+3
+3.
-3
-3.
a
t
#t
nil
()
#f
(t () . (1 2 3))
"There is an ENTER HERE>>\nSee?!"
"Use '\"' to start and close a string."
"OurScheme allows the use of '\\n', '\\t' and  '\\\"' in a string."
"Please enter YES\NO below this line >\n"
"You need to handle >>\\<<"   "You also need to handle >>\"<<"
((1 2 3) . (4 . (5 . nil)))
((1 2 3) . (4 . (5 . ())))
(12.5       . (4 . 5))
(10 12.()) 
(10 ().125)
( 1 2.5)
( 1 2.a)
(1 2.25.5.a)
"Hi"
"(1 . 2   . 3)"
(((1 . 2) 
    . ((3 4) 
       . 
       (5 . 6)
      )
   ) 
   . (7 . 8)
  )
(Hi there ! How are you ?)
(Hi there! How are you?)
(Hi! (How about using . (Lisp (instead of . C?))))
(Hi there) (How are you)
(Hi
           .
           (there  .(     ; note that there may be no space between
                          ; '.' and '('
           How is it going?))
           )
; Note : We have just introduced the use of comments.
  ; ';' starts a comment until the end of line.
  ; A comment is something that ReadSExp() should skip when 
  ; reading in an S-expression.

(1 2 3)
(1 2 
   3) (4 5
      6)
'(Hi
           .
           (there  .(     ; note that there may be no space between
                          ; '.' and '('
           How is it going?))
           )
'(1 2 3) .25
(
   exit  ; as of now, your system only understands 'exit' ;
   
      )  ; and the program terminates when it sees '(exit)'